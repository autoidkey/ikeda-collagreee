#!/usr/bin/env python## coding: utf-8import os, sysimport mathimport MeCabfrom collections import Counter#出現数が格納された同一の辞書dic_tf,dic_idfを引数として，結果を格納した辞書を返す#フォーマット　{文書番号:{単語:出現回数}}#動作テスト用#pythonバインディングのMeCabが必要#メカブの用意m = MeCab.Tagger('-Owakati')#文節に分割def bunkatsu(sentense):	node = m.parseToNode(sentense)	result = []	while node:		word = node.surface		feat = node.feature		feat = feat.split(",")		if feat[0] == "名詞" and (feat[1] not in {"数", "非自立", "代名詞"}) and (feat[1] != "サ変接続" or feat[6] != "*"):			result.append(word)		node = node.next	return result#tfの計算と書き換えdef TF(dictionary):	for num in dictionary:		cntall = 0		for word in dictionary[num]:			cntall += dictionary[num][word]		for word in dictionary[num]:			dictionary[num][word] = dictionary[num][word]/float(cntall)#idfの計算と書き換えdef IDF(dictionary):	cntall = len(dictionary)	for num in dictionary:		for word in dictionary[num]:			cnt = 0			for num2 in dictionary:				if word in dictionary[num2]:					cnt += 1			dictionary[num][word] = math.log(cntall/float(cnt)) + 1#tf-idfを計算def TF_IDF(dic_tf, dic_idf):	dic_tf_idf = {}	TF(dic_tf)	IDF(dic_idf)	for num in dic_tf:		dic_tf_idf[num] = {}		for word in dic_tf[num]:			dic_tf_idf[num][word] = dic_tf[num][word] * dic_idf[num][word]	return dic_tf_idf#リストから分割してtf-idfの値を付与def All_TF_IDF(all_sentense):	dic = {}	for num in range(0, len(all_sentense)):		sentense = bunkatsu(all_sentense[num])		counter = Counter(sentense)		dic[num] = {}		for word, cnt in counter.most_common():			dic[num][word] = cnt	dic_tf = dic	dic_idf = dic	return TF_IDF(dic_tf, dic_idf)	if __name__ == "__main__":	print "標準入力からは使いません"			