   <style>
      rect.bordered {
        stroke: #E6E6E6;
        stroke-width:2px;
      }

      text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
      }

      text.axis-workweek {
        fill: #000;
      }

      text.axis-worktime {
        fill: #000;
      }
      div.tooltip { 
          position: absolute;     
          text-align: center;     
          width: 60px;          
          height: 50px;         
          padding: 2px;       
          font: 12px sans-serif;    
          background: lightsteelblue; 
          border: 0px;    
          border-radius: 8px;     
          pointer-events: none;   
      }

    </style>
    <script src="http://d3js.org/d3.v3.js"></script>

    <div id="chart"></div>
    <div id="dataset-picker">
    </div>
    <script type="text/javascript">
      var margin = { top: 50, right: 30, bottom: 100, left: 30 },
          width = window.innerWidth - margin.left - margin.right,
          height = window.innerHeight - margin.top - margin.bottom - 100,
          colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
          days = <%= raw @col.to_json %>,
          times = <%= raw @row.to_json %>,
          gridSize = Math.floor(width / times.length) > Math.floor(height / days.length) ? Math.floor(height / days.length) : Math.floor(width / times.length),
          buckets = 9,
          legendElementWidth = (times.length * gridSize) / buckets,
          datasets = ["/log/entries.tsv", "/log/likes.tsv","/log/webviews.tsv"];

      var svg = d3.select("#chart").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      var dayLabels = svg.selectAll(".dayLabel")
          .data(days)
          .enter().append("text")
            .text(function (d) { return d; })
            .attr("x", 0)
            .attr("y", function (d, i) { return i * gridSize; })
            .style("text-anchor", "end")
            .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
            .attr("class", function (d, i) { return "dayLabel mono axis axis-workweek"; });

      var timeLabels = svg.selectAll(".timeLabel")
          .data(times)
          .enter().append("text")
            .text(function(d) { return d; })
            .attr("x", function(d, i) { return i * gridSize; })
            .attr("y", 0)
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + gridSize / 2 + ", -6)")
            .attr("class", function(d, i) { return "timeLabel mono axis axis-worktime"; });

      var div = d3.select("body").append("div")
          .attr("class", "tooltip")
          .style("opacity", 0);

      var heatmapChart = function(tsvFile) {
        d3.tsv(tsvFile,
        function(d) {
          return {
            day: +d.day,
            hour: +d.hour,
            value: +d.value,
            username: d.username,
          };
        },
        function(error, data) {
          var colorScale = d3.scale.quantile()
              .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
              .range(colors);

          var cards = svg.selectAll(".hour")
              .data(data, function(d) {return d.day+':'+d.hour;});

          cards.append("title");

          cards.enter().append("rect")
              .attr("x", function(d) { return (d.hour - 1) * gridSize; })
              .attr("y", function(d) { return (d.day - 1) * gridSize; })
              .attr("rx", 4)
              .attr("ry", 4)
              .attr("class", "hour bordered")
              .attr("width", gridSize)
              .attr("height", gridSize)
              .on("mouseover", function(d) {
                  div.transition()
                      .duration(200)
                      .style("opacity", .9);
                  div .html(d.value + "<br/>"  +d.username)
                      .style("left", (d3.event.pageX) + "px")
                      .style("top", (d3.event.pageY - 28) + "px");
              })
              .on("mouseout", function(d) {
                  div.transition()
                      .duration(500)
                      .style("opacity", 0);
              })
              .style("fill", colors[0]);

          cards.transition().duration(1000)
              .style("fill", function(d) { return colorScale(d.value); });

          cards.select("title").text(function(d) { return d.value; });

          cards.exit().remove();

          var legend = svg.selectAll(".legend")
              .data([0].concat(colorScale.quantiles()), function(d) { return d; });

          legend.enter().append("g")
              .attr("class", "legend");

          legend.append("rect")
            .attr("x", function(d, i) { return legendElementWidth * i; })
            .attr("y", height + 20)
            .attr("width", legendElementWidth)
            .attr("height", gridSize / 2)
            .style("fill", function(d, i) { return colors[i]; });

          legend.append("text")
            .attr("class", "mono")
            .text(function(d) { return "â‰¥ " + Math.round(d); })
            .attr("x", function(d, i) { return legendElementWidth * i; })
            .attr("y", height + gridSize);

          legend.exit().remove();

        });
      };

      heatmapChart(datasets[0]);

      $(".hour").on({
        'mouseenter':function(){
          var text = $(this).attr('data-text');
          $(this).append('<div class="sample3-tooltips">'+text+'</div>');
        },
        'mouseleave':function(){
          $(this).find(".sample3-tooltips").remove();
        }
      });

      // var datasetpicker = d3.select("#dataset-picker").selectAll(".dataset-button")
      //   .data(datasets);

      // datasetpicker.enter()
      //   .append("input")
      //   .attr("value", function(d){ return d })
      //   .attr("type", "button")
      //   .attr("class", "dataset-button btn-default")
      //   .on("click", function(d) {
      //     heatmapChart(d);
      //   });


    // setInterval(function(){
    //   $.ajax({
    //     url: "/api/facilitation/reload_graph",
    //     type: "GET",
    //     success: function(data) {
    //       heatmapChart(datasets[0]);
    //     },
    //     error: function(data) {
    //       console.log(data)
    //     }
    // });
    // },10000);


    </script>